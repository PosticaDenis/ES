
lab4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  00000144  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000085  00000000  00000000  00000810  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000060  00000000  00000000  00000895  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000cc  00000000  00000000  000008f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000205  00000000  00000000  000009c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000ea  00000000  00000000  00000bc6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002ff  00000000  00000000  00000cb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d0  00000000  00000000  00000fb0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000114  00000000  00000000  00001080  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubtypes 0000004e  00000000  00000000  00001194  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 76 00 	jmp	0xec	; 0xec <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:



int main(void)
{
	L293_init();
  6c:	0e 94 68 00 	call	0xd0	; 0xd0 <L293_init>
	initButton1();
  70:	0e 94 58 00 	call	0xb0	; 0xb0 <initButton1>
	initButton2();
  74:	0e 94 5a 00 	call	0xb4	; 0xb4 <initButton2>


	  while(1) {

		  if(button1Pressed() && button2Pressed()) {
  78:	0e 94 5c 00 	call	0xb8	; 0xb8 <button1Pressed>
  7c:	00 97       	sbiw	r24, 0x00	; 0
  7e:	39 f0       	breq	.+14     	; 0x8e <main+0x22>
  80:	0e 94 62 00 	call	0xc4	; 0xc4 <button2Pressed>
  84:	00 97       	sbiw	r24, 0x00	; 0
  86:	19 f0       	breq	.+6      	; 0x8e <main+0x22>
			  stopMotor();
  88:	0e 94 71 00 	call	0xe2	; 0xe2 <stopMotor>
  8c:	f5 cf       	rjmp	.-22     	; 0x78 <main+0xc>
		  } 
		  
		  else if(button1Pressed()) {
  8e:	0e 94 5c 00 	call	0xb8	; 0xb8 <button1Pressed>
  92:	00 97       	sbiw	r24, 0x00	; 0
  94:	19 f0       	breq	.+6      	; 0x9c <main+0x30>
			  motorLeft();
  96:	0e 94 6e 00 	call	0xdc	; 0xdc <motorLeft>
  9a:	ee cf       	rjmp	.-36     	; 0x78 <main+0xc>
		  } 

		  else if(button2Pressed()) {
  9c:	0e 94 62 00 	call	0xc4	; 0xc4 <button2Pressed>
  a0:	00 97       	sbiw	r24, 0x00	; 0
  a2:	19 f0       	breq	.+6      	; 0xaa <main+0x3e>
			  motorRight();
  a4:	0e 94 6b 00 	call	0xd6	; 0xd6 <motorRight>
  a8:	e7 cf       	rjmp	.-50     	; 0x78 <main+0xc>
		  }

		  else {
		      freeMotor();
  aa:	0e 94 74 00 	call	0xe8	; 0xe8 <freeMotor>
  ae:	e4 cf       	rjmp	.-56     	; 0x78 <main+0xc>

000000b0 <initButton1>:
#include "button.h"


void initButton1() {
	DDRC &= ~(1 << PORTC2) ;
  b0:	a2 98       	cbi	0x14, 2	; 20
}
  b2:	08 95       	ret

000000b4 <initButton2>:

void initButton2() {
	DDRC &= ~(1 << PORTC3) ;
  b4:	a3 98       	cbi	0x14, 3	; 20
}
  b6:	08 95       	ret

000000b8 <button1Pressed>:

int button1Pressed() {
	return PINC & (1<<PORTC2);
  b8:	23 b3       	in	r18, 0x13	; 19
  ba:	30 e0       	ldi	r19, 0x00	; 0
  bc:	24 70       	andi	r18, 0x04	; 4
  be:	30 70       	andi	r19, 0x00	; 0
}
  c0:	c9 01       	movw	r24, r18
  c2:	08 95       	ret

000000c4 <button2Pressed>:

int button2Pressed() {
	return PINC & (1<<PORTC3);
  c4:	23 b3       	in	r18, 0x13	; 19
  c6:	30 e0       	ldi	r19, 0x00	; 0
  c8:	28 70       	andi	r18, 0x08	; 8
  ca:	30 70       	andi	r19, 0x00	; 0
}
  cc:	c9 01       	movw	r24, r18
  ce:	08 95       	ret

000000d0 <L293_init>:

#include "L293.h"


void L293_init() {
	DDRC = 0b11111111;
  d0:	8f ef       	ldi	r24, 0xFF	; 255
  d2:	84 bb       	out	0x14, r24	; 20

}
  d4:	08 95       	ret

000000d6 <motorRight>:


void motorRight()
{
	PORTC = 0b00000010;
  d6:	82 e0       	ldi	r24, 0x02	; 2
  d8:	85 bb       	out	0x15, r24	; 21
}
  da:	08 95       	ret

000000dc <motorLeft>:

void motorLeft()
{
	 PORTC = 0b00000001;
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	85 bb       	out	0x15, r24	; 21
}
  e0:	08 95       	ret

000000e2 <stopMotor>:

void stopMotor()
{
	PORTC = 0b00000011;
  e2:	83 e0       	ldi	r24, 0x03	; 3
  e4:	85 bb       	out	0x15, r24	; 21
}
  e6:	08 95       	ret

000000e8 <freeMotor>:

void freeMotor()
{
	PORTC = 0b00000000;
  e8:	15 ba       	out	0x15, r1	; 21
}
  ea:	08 95       	ret

000000ec <_exit>:
  ec:	f8 94       	cli

000000ee <__stop_program>:
  ee:	ff cf       	rjmp	.-2      	; 0xee <__stop_program>
