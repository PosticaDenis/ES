
lab5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000dc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000001  00800060  00800060  00000150  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  00000150  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  0000081c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000040  00000000  00000000  000008a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000006f  00000000  00000000  000008e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000015c  00000000  00000000  00000950  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000ff  00000000  00000000  00000aac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000229  00000000  00000000  00000bab  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000050  00000000  00000000  00000dd4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000000c5  00000000  00000000  00000e24  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubtypes 0000003c  00000000  00000000  00000ee9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 4f 00 	call	0x9e	; 0x9e <main>
  74:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_11>:
#include "timer.h"
  
// TIMER0 overflow interrupt service routine
// called whenever TCNT0 overflows
ISR(TIMER0_OVF_vect)
{
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	8f 93       	push	r24
    // keep a track of number of overflows
    tot_overflow++;
  88:	80 91 60 00 	lds	r24, 0x0060
  8c:	8f 5f       	subi	r24, 0xFF	; 255
  8e:	80 93 60 00 	sts	0x0060, r24
}
  92:	8f 91       	pop	r24
  94:	0f 90       	pop	r0
  96:	0f be       	out	0x3f, r0	; 63
  98:	0f 90       	pop	r0
  9a:	1f 90       	pop	r1
  9c:	18 95       	reti

0000009e <main>:
  
int main(void)
{
    // connect led to pin PC0
    DDRA |= (1 << 0);
  9e:	d0 9a       	sbi	0x1a, 0	; 26
  
    // initialize timer
     timer0_init();
  a0:	0e 94 61 00 	call	0xc2	; 0xc2 <timer0_init>
        if (tot_overflow >= 12)  // NOTE: '>=' is used
        {
            // check if the timer count reaches 53
            if (TCNT0 >= 53)
            {
                PORTA ^= (1 << PINA0);    // toggles the led
  a4:	91 e0       	ldi	r25, 0x01	; 1
  
    // loop forever
    while(1)
    {
        // check if no. of overflows = 12
        if (tot_overflow >= 12)  // NOTE: '>=' is used
  a6:	80 91 60 00 	lds	r24, 0x0060
  aa:	8c 30       	cpi	r24, 0x0C	; 12
  ac:	e0 f3       	brcs	.-8      	; 0xa6 <main+0x8>
        {
            // check if the timer count reaches 53
            if (TCNT0 >= 53)
  ae:	82 b7       	in	r24, 0x32	; 50
  b0:	85 33       	cpi	r24, 0x35	; 53
  b2:	c8 f3       	brcs	.-14     	; 0xa6 <main+0x8>
            {
                PORTA ^= (1 << PINA0);    // toggles the led
  b4:	8b b3       	in	r24, 0x1b	; 27
  b6:	89 27       	eor	r24, r25
  b8:	8b bb       	out	0x1b, r24	; 27
                TCNT0 = 0;            // reset counter
  ba:	12 be       	out	0x32, r1	; 50
                tot_overflow = 0;     // reset overflow counter
  bc:	10 92 60 00 	sts	0x0060, r1
  c0:	f2 cf       	rjmp	.-28     	; 0xa6 <main+0x8>

000000c2 <timer0_init>:

// initialize timer, interrupt and variable
void timer0_init()
{
    // set up timer with prescaler = 256
    TCCR0 |= (1 << CS02);
  c2:	83 b7       	in	r24, 0x33	; 51
  c4:	84 60       	ori	r24, 0x04	; 4
  c6:	83 bf       	out	0x33, r24	; 51
  
    // initialize counter
    TCNT0 = 0;
  c8:	12 be       	out	0x32, r1	; 50
  
    // enable overflow interrupt
    TIMSK |= (1 << TOIE0);
  ca:	89 b7       	in	r24, 0x39	; 57
  cc:	81 60       	ori	r24, 0x01	; 1
  ce:	89 bf       	out	0x39, r24	; 57
  
    // enable global interrupts
    sei();
  d0:	78 94       	sei
  
    // initialize overflow counter variable
    tot_overflow = 0;
  d2:	10 92 60 00 	sts	0x0060, r1
}
  d6:	08 95       	ret

000000d8 <_exit>:
  d8:	f8 94       	cli

000000da <__stop_program>:
  da:	ff cf       	rjmp	.-2      	; 0xda <__stop_program>
