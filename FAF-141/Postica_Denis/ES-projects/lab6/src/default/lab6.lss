
lab6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000182  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003a  00800060  00000182  000001f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000230  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  000008fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000060  00000000  00000000  00000981  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000000ba  00000000  00000000  000009e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000041a  00000000  00000000  00000a9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000237  00000000  00000000  00000eb5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003d7  00000000  00000000  000010ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000090  00000000  00000000  000014c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000162  00000000  00000000  00001554  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001dc  00000000  00000000  000016b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 00000068  00000000  00000000  00001892  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000060  00000000  00000000  000018fa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e8       	ldi	r30, 0x82	; 130
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 39       	cpi	r26, 0x9A	; 154
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	aa e9       	ldi	r26, 0x9A	; 154
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 39       	cpi	r26, 0x9A	; 154
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 bf 00 	jmp	0x17e	; 0x17e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:

    };

int main(void)
{
	ledInit();
  92:	0e 94 63 00 	call	0xc6	; 0xc6 <ledInit>
	buttonInit();
  96:	0e 94 5b 00 	call	0xb6	; 0xb6 <buttonInit>
    
    while(1)
    {
        if (buttonIsPressed()) {
  9a:	0e 94 5d 00 	call	0xba	; 0xba <buttonIsPressed>
  9e:	00 97       	sbiw	r24, 0x00	; 0
  a0:	29 f0       	breq	.+10     	; 0xac <main+0x1a>

        	ledGoRight(rightArrow); }
  a2:	80 e6       	ldi	r24, 0x60	; 96
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	0e 94 92 00 	call	0x124	; 0x124 <ledGoRight>
  aa:	f7 cf       	rjmp	.-18     	; 0x9a <main+0x8>
		
		else {

			ledGoLeft(leftArrow);	
  ac:	89 e7       	ldi	r24, 0x79	; 121
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	0e 94 67 00 	call	0xce	; 0xce <ledGoLeft>
  b4:	f2 cf       	rjmp	.-28     	; 0x9a <main+0x8>

000000b6 <buttonInit>:
#include "button.h"

void buttonInit() {
	DDRC &= ~(1 << PORTC0) ;   /* sets direction of DDRB to in (0).*/
  b6:	a0 98       	cbi	0x14, 0	; 20
}
  b8:	08 95       	ret

000000ba <buttonIsPressed>:

int buttonIsPressed() {

	return PINC & (1<<PORTC0); /* returns the value of PORTA0*/
  ba:	23 b3       	in	r18, 0x13	; 19
  bc:	30 e0       	ldi	r19, 0x00	; 0
  be:	21 70       	andi	r18, 0x01	; 1
  c0:	30 70       	andi	r19, 0x00	; 0
}
  c2:	c9 01       	movw	r24, r18
  c4:	08 95       	ret

000000c6 <ledInit>:

char PORT[8] = {1,2,4,8,16,32,64,128};

void ledInit(void) {

	DDRB = 0xFF; //PORTB as output
  c6:	8f ef       	ldi	r24, 0xFF	; 255
  c8:	87 bb       	out	0x17, r24	; 23
    DDRA = 0xFF; //PORTA as output
  ca:	8a bb       	out	0x1a, r24	; 26
}
  cc:	08 95       	ret

000000ce <ledGoLeft>:

void ledGoLeft(char leftArrow[]) {
  ce:	1f 93       	push	r17
  d0:	cf 93       	push	r28
  d2:	df 93       	push	r29
  d4:	21 e1       	ldi	r18, 0x11	; 17
  d6:	30 e0       	ldi	r19, 0x00	; 0
  d8:	1b c0       	rjmp	.+54     	; 0x110 <ledGoLeft+0x42>
            for(int a=0;a<20;a++) //show each character 20 times before shifting a column
                {
                    
                    for (int i=0;i<8;i++)
                    {
                        PORTB = ~PORT[i];    //ground the PORTC pin
  da:	10 81       	ld	r17, Z
  dc:	10 95       	com	r17
  de:	18 bb       	out	0x18, r17	; 24
                        PORTA = leftArrow[i+x];  //power the PORTA 
  e0:	1d 91       	ld	r17, X+
  e2:	1b bb       	out	0x1b, r17	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e4:	c7 ee       	ldi	r28, 0xE7	; 231
  e6:	d3 e0       	ldi	r29, 0x03	; 3
  e8:	21 97       	sbiw	r28, 0x01	; 1
  ea:	f1 f7       	brne	.-4      	; 0xe8 <ledGoLeft+0x1a>
  ec:	00 c0       	rjmp	.+0      	; 0xee <ledGoLeft+0x20>
  ee:	00 00       	nop
                        _delay_ms(0.5);
                        PORTB = PORT[i];     //clear pin after 1msec
  f0:	11 91       	ld	r17, Z+
  f2:	18 bb       	out	0x18, r17	; 24
	for(int x=17;x>0;x--) // there are 142 values in the set of ALPHA to display 'CIRCUIT DIGEST', then shift them after each loop execution
        {
            for(int a=0;a<20;a++) //show each character 20 times before shifting a column
                {
                    
                    for (int i=0;i<8;i++)
  f4:	10 e0       	ldi	r17, 0x00	; 0
  f6:	ea 39       	cpi	r30, 0x9A	; 154
  f8:	f1 07       	cpc	r31, r17
  fa:	79 f7       	brne	.-34     	; 0xda <ledGoLeft+0xc>
  fc:	41 50       	subi	r20, 0x01	; 1
  fe:	50 40       	sbci	r21, 0x00	; 0

void ledGoLeft(char leftArrow[]) {

	for(int x=17;x>0;x--) // there are 142 values in the set of ALPHA to display 'CIRCUIT DIGEST', then shift them after each loop execution
        {
            for(int a=0;a<20;a++) //show each character 20 times before shifting a column
 100:	21 f0       	breq	.+8      	; 0x10a <ledGoLeft+0x3c>
 102:	db 01       	movw	r26, r22
 104:	e2 e9       	ldi	r30, 0x92	; 146
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	e8 cf       	rjmp	.-48     	; 0xda <ledGoLeft+0xc>

	DDRB = 0xFF; //PORTB as output
    DDRA = 0xFF; //PORTA as output
}

void ledGoLeft(char leftArrow[]) {
 10a:	21 50       	subi	r18, 0x01	; 1
 10c:	30 40       	sbci	r19, 0x00	; 0

	for(int x=17;x>0;x--) // there are 142 values in the set of ALPHA to display 'CIRCUIT DIGEST', then shift them after each loop execution
 10e:	31 f0       	breq	.+12     	; 0x11c <ledGoLeft+0x4e>

	DDRB = 0xFF; //PORTB as output
    DDRA = 0xFF; //PORTA as output
}

void ledGoLeft(char leftArrow[]) {
 110:	44 e1       	ldi	r20, 0x14	; 20
 112:	50 e0       	ldi	r21, 0x00	; 0

	for(int x=17;x>0;x--) // there are 142 values in the set of ALPHA to display 'CIRCUIT DIGEST', then shift them after each loop execution
        {
            for(int a=0;a<20;a++) //show each character 20 times before shifting a column
 114:	bc 01       	movw	r22, r24
 116:	62 0f       	add	r22, r18
 118:	73 1f       	adc	r23, r19
 11a:	f3 cf       	rjmp	.-26     	; 0x102 <ledGoLeft+0x34>
                    }
                    
                }
    	}

}
 11c:	df 91       	pop	r29
 11e:	cf 91       	pop	r28
 120:	1f 91       	pop	r17
 122:	08 95       	ret

00000124 <ledGoRight>:

void ledGoRight(char rightArrow[]) {
 124:	1f 93       	push	r17
 126:	cf 93       	push	r28
 128:	df 93       	push	r29

	for(int x=0;x<18;x++) // there are 142 values in the set of ALPHA to display 'CIRCUIT DIGEST', then shift them after each loop execution
 12a:	20 e0       	ldi	r18, 0x00	; 0
 12c:	30 e0       	ldi	r19, 0x00	; 0
 12e:	1d c0       	rjmp	.+58     	; 0x16a <ledGoRight+0x46>
            for(int a=0;a<20;a++) //show each character 20 times before shifting a column
                {
                    
                    for (int i=0;i<8;i++)
                    {
                        PORTB = ~PORT[i];    //ground the PORTC pin
 130:	10 81       	ld	r17, Z
 132:	10 95       	com	r17
 134:	18 bb       	out	0x18, r17	; 24
                        PORTA = rightArrow[i+x];  //power the PORTA 
 136:	1d 91       	ld	r17, X+
 138:	1b bb       	out	0x1b, r17	; 27
 13a:	c7 ee       	ldi	r28, 0xE7	; 231
 13c:	d3 e0       	ldi	r29, 0x03	; 3
 13e:	21 97       	sbiw	r28, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <ledGoRight+0x1a>
 142:	00 c0       	rjmp	.+0      	; 0x144 <ledGoRight+0x20>
 144:	00 00       	nop
                        _delay_ms(0.5);
                        PORTB = PORT[i];     //clear pin after 1msec
 146:	11 91       	ld	r17, Z+
 148:	18 bb       	out	0x18, r17	; 24
	for(int x=0;x<18;x++) // there are 142 values in the set of ALPHA to display 'CIRCUIT DIGEST', then shift them after each loop execution
        {
            for(int a=0;a<20;a++) //show each character 20 times before shifting a column
                {
                    
                    for (int i=0;i<8;i++)
 14a:	10 e0       	ldi	r17, 0x00	; 0
 14c:	ea 39       	cpi	r30, 0x9A	; 154
 14e:	f1 07       	cpc	r31, r17
 150:	79 f7       	brne	.-34     	; 0x130 <ledGoRight+0xc>
 152:	41 50       	subi	r20, 0x01	; 1
 154:	50 40       	sbci	r21, 0x00	; 0

void ledGoRight(char rightArrow[]) {

	for(int x=0;x<18;x++) // there are 142 values in the set of ALPHA to display 'CIRCUIT DIGEST', then shift them after each loop execution
        {
            for(int a=0;a<20;a++) //show each character 20 times before shifting a column
 156:	21 f0       	breq	.+8      	; 0x160 <ledGoRight+0x3c>
 158:	db 01       	movw	r26, r22
 15a:	e2 e9       	ldi	r30, 0x92	; 146
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	e8 cf       	rjmp	.-48     	; 0x130 <ledGoRight+0xc>

}

void ledGoRight(char rightArrow[]) {

	for(int x=0;x<18;x++) // there are 142 values in the set of ALPHA to display 'CIRCUIT DIGEST', then shift them after each loop execution
 160:	2f 5f       	subi	r18, 0xFF	; 255
 162:	3f 4f       	sbci	r19, 0xFF	; 255
 164:	22 31       	cpi	r18, 0x12	; 18
 166:	31 05       	cpc	r19, r1
 168:	31 f0       	breq	.+12     	; 0x176 <ledGoRight+0x52>
                }
    	}

}

void ledGoRight(char rightArrow[]) {
 16a:	44 e1       	ldi	r20, 0x14	; 20
 16c:	50 e0       	ldi	r21, 0x00	; 0

	for(int x=0;x<18;x++) // there are 142 values in the set of ALPHA to display 'CIRCUIT DIGEST', then shift them after each loop execution
        {
            for(int a=0;a<20;a++) //show each character 20 times before shifting a column
 16e:	bc 01       	movw	r22, r24
 170:	62 0f       	add	r22, r18
 172:	73 1f       	adc	r23, r19
 174:	f1 cf       	rjmp	.-30     	; 0x158 <ledGoRight+0x34>
                    }
                    
                }
    	}

}
 176:	df 91       	pop	r29
 178:	cf 91       	pop	r28
 17a:	1f 91       	pop	r17
 17c:	08 95       	ret

0000017e <_exit>:
 17e:	f8 94       	cli

00000180 <__stop_program>:
 180:	ff cf       	rjmp	.-2      	; 0x180 <__stop_program>
