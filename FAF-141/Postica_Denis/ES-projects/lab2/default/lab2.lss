
lab2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001bc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  000001bc  00000250  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800076  00800076  00000266  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000268  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000934  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000a0  00000000  00000000  000009b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000000fc  00000000  00000000  00000a59  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000077c  00000000  00000000  00000b55  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000004a6  00000000  00000000  000012d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000006f8  00000000  00000000  00001777  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000e0  00000000  00000000  00001e70  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000023c  00000000  00000000  00001f50  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000016a  00000000  00000000  0000218c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 000000ef  00000000  00000000  000022f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000010  00000000  00000000  000023e5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec eb       	ldi	r30, 0xBC	; 188
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 37       	cpi	r26, 0x76	; 118
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a6 e7       	ldi	r26, 0x76	; 118
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 37       	cpi	r26, 0x7C	; 124
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include "uart_studio.h"
#include "button.h"
#include <avr/delay.h>


int main() {
  92:	1f 93       	push	r17
	
	init();
  94:	0e 94 6b 00 	call	0xd6	; 0xd6 <init>
	initLed();
  98:	0e 94 73 00 	call	0xe6	; 0xe6 <initLed>
	while(1) {
		_delay_ms(100);
		if(DDRC == 00000000) {
			ledOn();
			_delay_ms(5000);
			DDRC = (1<<DDC5);
  9c:	10 e2       	ldi	r17, 0x20	; 32
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9e:	8f ef       	ldi	r24, 0xFF	; 255
  a0:	90 e7       	ldi	r25, 0x70	; 112
  a2:	a2 e0       	ldi	r26, 0x02	; 2
  a4:	81 50       	subi	r24, 0x01	; 1
  a6:	90 40       	sbci	r25, 0x00	; 0
  a8:	a0 40       	sbci	r26, 0x00	; 0
  aa:	e1 f7       	brne	.-8      	; 0xa4 <main+0x12>
  ac:	00 c0       	rjmp	.+0      	; 0xae <main+0x1c>
  ae:	00 00       	nop
	init();
	initLed();
	
	while(1) {
		_delay_ms(100);
		if(DDRC == 00000000) {
  b0:	84 b3       	in	r24, 0x14	; 20
  b2:	88 23       	and	r24, r24
  b4:	69 f4       	brne	.+26     	; 0xd0 <main+0x3e>
			ledOn();
  b6:	0e 94 75 00 	call	0xea	; 0xea <ledOn>
  ba:	8f ef       	ldi	r24, 0xFF	; 255
  bc:	91 e1       	ldi	r25, 0x11	; 17
  be:	aa e7       	ldi	r26, 0x7A	; 122
  c0:	81 50       	subi	r24, 0x01	; 1
  c2:	90 40       	sbci	r25, 0x00	; 0
  c4:	a0 40       	sbci	r26, 0x00	; 0
  c6:	e1 f7       	brne	.-8      	; 0xc0 <main+0x2e>
  c8:	00 c0       	rjmp	.+0      	; 0xca <main+0x38>
  ca:	00 00       	nop
			_delay_ms(5000);
			DDRC = (1<<DDC5);
  cc:	14 bb       	out	0x14, r17	; 20
  ce:	e7 cf       	rjmp	.-50     	; 0x9e <main+0xc>
		} else {
			ledOff();
  d0:	0e 94 77 00 	call	0xee	; 0xee <ledOff>
  d4:	e4 cf       	rjmp	.-56     	; 0x9e <main+0xc>

000000d6 <init>:
#include "button.h"

void init() {
	DDRC &= ~(1 << PORTC5) ;
  d6:	a5 98       	cbi	0x14, 5	; 20
}
  d8:	08 95       	ret

000000da <isPressed>:

int isPressed() {

	return PINC & (1<<PORTC5);
  da:	23 b3       	in	r18, 0x13	; 19
  dc:	30 e0       	ldi	r19, 0x00	; 0
  de:	20 72       	andi	r18, 0x20	; 32
  e0:	30 70       	andi	r19, 0x00	; 0
}
  e2:	c9 01       	movw	r24, r18
  e4:	08 95       	ret

000000e6 <initLed>:
#include "led.h"

void initLed() {
	DDRA |= (1 << PORTA0); 
  e6:	d0 9a       	sbi	0x1a, 0	; 26
}
  e8:	08 95       	ret

000000ea <ledOn>:

void ledOn() {
	PORTA |= (1 << PORTA0); 
  ea:	d8 9a       	sbi	0x1b, 0	; 27
}
  ec:	08 95       	ret

000000ee <ledOff>:

void ledOff() {
	PORTA &= ~(1 << PORTA0);
  ee:	d8 98       	cbi	0x1b, 0	; 27
}
  f0:	08 95       	ret

000000f2 <uart_stdio_PutChar>:
#include "uart_studio.h"
#define UART_BAUD 9600

FILE uart_output = FDEV_SETUP_STREAM(uart_stdio_PutChar, NULL, _FDEV_SETUP_WRITE);

int uart_stdio_PutChar(char c, FILE *stream) {
  f2:	1f 93       	push	r17
  f4:	18 2f       	mov	r17, r24

  if (c == '\a') {
  f6:	87 30       	cpi	r24, 0x07	; 7
  f8:	49 f4       	brne	.+18     	; 0x10c <uart_stdio_PutChar+0x1a>
      fputs("*ring*\n", stderr);
  fa:	60 91 7a 00 	lds	r22, 0x007A
  fe:	70 91 7b 00 	lds	r23, 0x007B
 102:	80 e6       	ldi	r24, 0x60	; 96
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	0e 94 9d 00 	call	0x13a	; 0x13a <fputs>
      return 0;
 10a:	08 c0       	rjmp	.+16     	; 0x11c <uart_stdio_PutChar+0x2a>
    }

  if (c == '\n')
 10c:	8a 30       	cpi	r24, 0x0A	; 10
 10e:	19 f4       	brne	.+6      	; 0x116 <uart_stdio_PutChar+0x24>
    uart_stdio_PutChar('\r', stream);
 110:	8d e0       	ldi	r24, 0x0D	; 13
 112:	0e 94 79 00 	call	0xf2	; 0xf2 <uart_stdio_PutChar>
  while(~UCSRA & (1 << UDRE));
 116:	5d 9b       	sbis	0x0b, 5	; 11
 118:	fe cf       	rjmp	.-4      	; 0x116 <uart_stdio_PutChar+0x24>
  UDR = c;
 11a:	1c b9       	out	0x0c, r17	; 12

  return 0;
}
 11c:	80 e0       	ldi	r24, 0x00	; 0
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	1f 91       	pop	r17
 122:	08 95       	ret

00000124 <uart_stdio_Init>:
void uart_stdio_Init(void) {
	#if F_CPU < 2000000UL && defined(U2X)
	  UCSRA = _BV(U2X);             /* improve baud rate error by using 2x clk */
	  UBRRL = (F_CPU / (8UL * UART_BAUD)) - 1;
	#else
	  UBRRL = (F_CPU / (16UL * UART_BAUD)) - 1;
 124:	83 e3       	ldi	r24, 0x33	; 51
 126:	89 b9       	out	0x09, r24	; 9
	#endif
	  UCSRB = _BV(TXEN) | _BV(RXEN); /* tx/rx enable */
 128:	88 e1       	ldi	r24, 0x18	; 24
 12a:	8a b9       	out	0x0a, r24	; 10

	  stdout = &uart_output;
 12c:	88 e6       	ldi	r24, 0x68	; 104
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	90 93 79 00 	sts	0x0079, r25
 134:	80 93 78 00 	sts	0x0078, r24
}
 138:	08 95       	ret

0000013a <fputs>:
 13a:	ef 92       	push	r14
 13c:	ff 92       	push	r15
 13e:	0f 93       	push	r16
 140:	1f 93       	push	r17
 142:	cf 93       	push	r28
 144:	df 93       	push	r29
 146:	7c 01       	movw	r14, r24
 148:	eb 01       	movw	r28, r22
 14a:	8b 81       	ldd	r24, Y+3	; 0x03
 14c:	81 ff       	sbrs	r24, 1
 14e:	11 c0       	rjmp	.+34     	; 0x172 <fputs+0x38>
 150:	00 e0       	ldi	r16, 0x00	; 0
 152:	10 e0       	ldi	r17, 0x00	; 0
 154:	08 c0       	rjmp	.+16     	; 0x166 <fputs+0x2c>
 156:	e8 85       	ldd	r30, Y+8	; 0x08
 158:	f9 85       	ldd	r31, Y+9	; 0x09
 15a:	be 01       	movw	r22, r28
 15c:	09 95       	icall
 15e:	00 97       	sbiw	r24, 0x00	; 0
 160:	11 f0       	breq	.+4      	; 0x166 <fputs+0x2c>
 162:	0f ef       	ldi	r16, 0xFF	; 255
 164:	1f ef       	ldi	r17, 0xFF	; 255
 166:	f7 01       	movw	r30, r14
 168:	81 91       	ld	r24, Z+
 16a:	7f 01       	movw	r14, r30
 16c:	88 23       	and	r24, r24
 16e:	99 f7       	brne	.-26     	; 0x156 <fputs+0x1c>
 170:	02 c0       	rjmp	.+4      	; 0x176 <fputs+0x3c>
 172:	0f ef       	ldi	r16, 0xFF	; 255
 174:	1f ef       	ldi	r17, 0xFF	; 255
 176:	c8 01       	movw	r24, r16
 178:	cd b7       	in	r28, 0x3d	; 61
 17a:	de b7       	in	r29, 0x3e	; 62
 17c:	e6 e0       	ldi	r30, 0x06	; 6
 17e:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__epilogue_restores__+0x18>

00000182 <__epilogue_restores__>:
 182:	2a 88       	ldd	r2, Y+18	; 0x12
 184:	39 88       	ldd	r3, Y+17	; 0x11
 186:	48 88       	ldd	r4, Y+16	; 0x10
 188:	5f 84       	ldd	r5, Y+15	; 0x0f
 18a:	6e 84       	ldd	r6, Y+14	; 0x0e
 18c:	7d 84       	ldd	r7, Y+13	; 0x0d
 18e:	8c 84       	ldd	r8, Y+12	; 0x0c
 190:	9b 84       	ldd	r9, Y+11	; 0x0b
 192:	aa 84       	ldd	r10, Y+10	; 0x0a
 194:	b9 84       	ldd	r11, Y+9	; 0x09
 196:	c8 84       	ldd	r12, Y+8	; 0x08
 198:	df 80       	ldd	r13, Y+7	; 0x07
 19a:	ee 80       	ldd	r14, Y+6	; 0x06
 19c:	fd 80       	ldd	r15, Y+5	; 0x05
 19e:	0c 81       	ldd	r16, Y+4	; 0x04
 1a0:	1b 81       	ldd	r17, Y+3	; 0x03
 1a2:	aa 81       	ldd	r26, Y+2	; 0x02
 1a4:	b9 81       	ldd	r27, Y+1	; 0x01
 1a6:	ce 0f       	add	r28, r30
 1a8:	d1 1d       	adc	r29, r1
 1aa:	0f b6       	in	r0, 0x3f	; 63
 1ac:	f8 94       	cli
 1ae:	de bf       	out	0x3e, r29	; 62
 1b0:	0f be       	out	0x3f, r0	; 63
 1b2:	cd bf       	out	0x3d, r28	; 61
 1b4:	ed 01       	movw	r28, r26
 1b6:	08 95       	ret

000001b8 <_exit>:
 1b8:	f8 94       	cli

000001ba <__stop_program>:
 1ba:	ff cf       	rjmp	.-2      	; 0x1ba <__stop_program>
