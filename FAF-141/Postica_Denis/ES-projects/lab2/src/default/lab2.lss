
lab2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000194  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  00000194  00000228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800076  00800076  0000023e  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000240  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  0000090c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000a0  00000000  00000000  00000991  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000000fc  00000000  00000000  00000a31  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000065f  00000000  00000000  00000b2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000003cf  00000000  00000000  0000118c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000005cf  00000000  00000000  0000155b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000e0  00000000  00000000  00001b2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000001dd  00000000  00000000  00001c0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000122  00000000  00000000  00001de9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 000000c9  00000000  00000000  00001f0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000010  00000000  00000000  00001fd4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e9       	ldi	r30, 0x94	; 148
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 37       	cpi	r26, 0x76	; 118
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a6 e7       	ldi	r26, 0x76	; 118
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 37       	cpi	r26, 0x7C	; 124
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 c8 00 	jmp	0x190	; 0x190 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include <avr/delay.h>


int main() {
	
	init();
  92:	0e 94 57 00 	call	0xae	; 0xae <init>
	initLed();
  96:	0e 94 5f 00 	call	0xbe	; 0xbe <initLed>
	
	while(1) {
		if(isPressed()) {
  9a:	0e 94 59 00 	call	0xb2	; 0xb2 <isPressed>
  9e:	00 97       	sbiw	r24, 0x00	; 0
  a0:	19 f0       	breq	.+6      	; 0xa8 <main+0x16>
			ledOn();
  a2:	0e 94 61 00 	call	0xc2	; 0xc2 <ledOn>
  a6:	f9 cf       	rjmp	.-14     	; 0x9a <main+0x8>
		} else {
			ledOff();
  a8:	0e 94 63 00 	call	0xc6	; 0xc6 <ledOff>
  ac:	f6 cf       	rjmp	.-20     	; 0x9a <main+0x8>

000000ae <init>:
#include "button.h"

void init() {
	DDRA &= ~(1 << PORTA0) ;
  ae:	d0 98       	cbi	0x1a, 0	; 26
}
  b0:	08 95       	ret

000000b2 <isPressed>:

int isPressed() {

	return PINA & (1<<PORTA0);
  b2:	29 b3       	in	r18, 0x19	; 25
  b4:	30 e0       	ldi	r19, 0x00	; 0
  b6:	21 70       	andi	r18, 0x01	; 1
  b8:	30 70       	andi	r19, 0x00	; 0
}
  ba:	c9 01       	movw	r24, r18
  bc:	08 95       	ret

000000be <initLed>:
#include "led.h"

void initLed() {
	DDRB |= (1 << PORTB1); 
  be:	b9 9a       	sbi	0x17, 1	; 23
}
  c0:	08 95       	ret

000000c2 <ledOn>:

void ledOn() {
	PORTB |= (1 << PORTB1); 
  c2:	c1 9a       	sbi	0x18, 1	; 24
}
  c4:	08 95       	ret

000000c6 <ledOff>:

void ledOff() {
	PORTB &= ~(1 << PORTB1);
  c6:	c1 98       	cbi	0x18, 1	; 24
}
  c8:	08 95       	ret

000000ca <uart_stdio_PutChar>:
#include "uart_studio.h"
#define UART_BAUD 9600

FILE uart_output = FDEV_SETUP_STREAM(uart_stdio_PutChar, NULL, _FDEV_SETUP_WRITE);

int uart_stdio_PutChar(char c, FILE *stream) {
  ca:	1f 93       	push	r17
  cc:	18 2f       	mov	r17, r24

  if (c == '\a') {
  ce:	87 30       	cpi	r24, 0x07	; 7
  d0:	49 f4       	brne	.+18     	; 0xe4 <uart_stdio_PutChar+0x1a>
      fputs("*ring*\n", stderr);
  d2:	60 91 7a 00 	lds	r22, 0x007A
  d6:	70 91 7b 00 	lds	r23, 0x007B
  da:	80 e6       	ldi	r24, 0x60	; 96
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	0e 94 89 00 	call	0x112	; 0x112 <fputs>
      return 0;
  e2:	08 c0       	rjmp	.+16     	; 0xf4 <uart_stdio_PutChar+0x2a>
    }

  if (c == '\n')
  e4:	8a 30       	cpi	r24, 0x0A	; 10
  e6:	19 f4       	brne	.+6      	; 0xee <uart_stdio_PutChar+0x24>
    uart_stdio_PutChar('\r', stream);
  e8:	8d e0       	ldi	r24, 0x0D	; 13
  ea:	0e 94 65 00 	call	0xca	; 0xca <uart_stdio_PutChar>
  while(~UCSRA & (1 << UDRE));
  ee:	5d 9b       	sbis	0x0b, 5	; 11
  f0:	fe cf       	rjmp	.-4      	; 0xee <uart_stdio_PutChar+0x24>
  UDR = c;
  f2:	1c b9       	out	0x0c, r17	; 12

  return 0;
}
  f4:	80 e0       	ldi	r24, 0x00	; 0
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	1f 91       	pop	r17
  fa:	08 95       	ret

000000fc <uart_stdio_Init>:
void uart_stdio_Init(void) {
	#if F_CPU < 2000000UL && defined(U2X)
	  UCSRA = _BV(U2X);             /* improve baud rate error by using 2x clk */
	  UBRRL = (F_CPU / (8UL * UART_BAUD)) - 1;
	#else
	  UBRRL = (F_CPU / (16UL * UART_BAUD)) - 1;
  fc:	83 e3       	ldi	r24, 0x33	; 51
  fe:	89 b9       	out	0x09, r24	; 9
	#endif
	  UCSRB = _BV(TXEN) | _BV(RXEN); /* tx/rx enable */
 100:	88 e1       	ldi	r24, 0x18	; 24
 102:	8a b9       	out	0x0a, r24	; 10

	  stdout = &uart_output;
 104:	88 e6       	ldi	r24, 0x68	; 104
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	90 93 79 00 	sts	0x0079, r25
 10c:	80 93 78 00 	sts	0x0078, r24
}
 110:	08 95       	ret

00000112 <fputs>:
 112:	ef 92       	push	r14
 114:	ff 92       	push	r15
 116:	0f 93       	push	r16
 118:	1f 93       	push	r17
 11a:	cf 93       	push	r28
 11c:	df 93       	push	r29
 11e:	7c 01       	movw	r14, r24
 120:	eb 01       	movw	r28, r22
 122:	8b 81       	ldd	r24, Y+3	; 0x03
 124:	81 ff       	sbrs	r24, 1
 126:	11 c0       	rjmp	.+34     	; 0x14a <fputs+0x38>
 128:	00 e0       	ldi	r16, 0x00	; 0
 12a:	10 e0       	ldi	r17, 0x00	; 0
 12c:	08 c0       	rjmp	.+16     	; 0x13e <fputs+0x2c>
 12e:	e8 85       	ldd	r30, Y+8	; 0x08
 130:	f9 85       	ldd	r31, Y+9	; 0x09
 132:	be 01       	movw	r22, r28
 134:	09 95       	icall
 136:	00 97       	sbiw	r24, 0x00	; 0
 138:	11 f0       	breq	.+4      	; 0x13e <fputs+0x2c>
 13a:	0f ef       	ldi	r16, 0xFF	; 255
 13c:	1f ef       	ldi	r17, 0xFF	; 255
 13e:	f7 01       	movw	r30, r14
 140:	81 91       	ld	r24, Z+
 142:	7f 01       	movw	r14, r30
 144:	88 23       	and	r24, r24
 146:	99 f7       	brne	.-26     	; 0x12e <fputs+0x1c>
 148:	02 c0       	rjmp	.+4      	; 0x14e <fputs+0x3c>
 14a:	0f ef       	ldi	r16, 0xFF	; 255
 14c:	1f ef       	ldi	r17, 0xFF	; 255
 14e:	c8 01       	movw	r24, r16
 150:	cd b7       	in	r28, 0x3d	; 61
 152:	de b7       	in	r29, 0x3e	; 62
 154:	e6 e0       	ldi	r30, 0x06	; 6
 156:	0c 94 b9 00 	jmp	0x172	; 0x172 <__epilogue_restores__+0x18>

0000015a <__epilogue_restores__>:
 15a:	2a 88       	ldd	r2, Y+18	; 0x12
 15c:	39 88       	ldd	r3, Y+17	; 0x11
 15e:	48 88       	ldd	r4, Y+16	; 0x10
 160:	5f 84       	ldd	r5, Y+15	; 0x0f
 162:	6e 84       	ldd	r6, Y+14	; 0x0e
 164:	7d 84       	ldd	r7, Y+13	; 0x0d
 166:	8c 84       	ldd	r8, Y+12	; 0x0c
 168:	9b 84       	ldd	r9, Y+11	; 0x0b
 16a:	aa 84       	ldd	r10, Y+10	; 0x0a
 16c:	b9 84       	ldd	r11, Y+9	; 0x09
 16e:	c8 84       	ldd	r12, Y+8	; 0x08
 170:	df 80       	ldd	r13, Y+7	; 0x07
 172:	ee 80       	ldd	r14, Y+6	; 0x06
 174:	fd 80       	ldd	r15, Y+5	; 0x05
 176:	0c 81       	ldd	r16, Y+4	; 0x04
 178:	1b 81       	ldd	r17, Y+3	; 0x03
 17a:	aa 81       	ldd	r26, Y+2	; 0x02
 17c:	b9 81       	ldd	r27, Y+1	; 0x01
 17e:	ce 0f       	add	r28, r30
 180:	d1 1d       	adc	r29, r1
 182:	0f b6       	in	r0, 0x3f	; 63
 184:	f8 94       	cli
 186:	de bf       	out	0x3e, r29	; 62
 188:	0f be       	out	0x3f, r0	; 63
 18a:	cd bf       	out	0x3d, r28	; 61
 18c:	ed 01       	movw	r28, r26
 18e:	08 95       	ret

00000190 <_exit>:
 190:	f8 94       	cli

00000192 <__stop_program>:
 192:	ff cf       	rjmp	.-2      	; 0x192 <__stop_program>
